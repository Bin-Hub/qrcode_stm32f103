#ifndef __QR_ENCODE_H
#define __QR_ENCODE_H

/////////////////////////////////////////////////////////////////////////////
// ??

// ???????
#define QR_LEVEL_L	0
#define QR_LEVEL_M	1
#define QR_LEVEL_Q	2
#define QR_LEVEL_H	3

// ??????
#define QR_MODE_NUMERAL		0
#define QR_MODE_ALPHABET	1
#define QR_MODE_8BIT		2
#define QR_MODE_KANJI		3

// ?????(??)????
#define QR_VRESION_S	0 // 1 ? 9
#define QR_VRESION_M	1 // 10 ? 26
#define QR_VRESION_L	2 // 27 ? 40

#define MAX_ALLCODEWORD	 3706 // ???????????
#define MAX_DATACODEWORD 2956 // ????????????(?????40-L)
#define MAX_CODEBLOCK	  153 // ?????????????????(???????????)
#define MAX_MODULESIZE	  177 // ???????????

// ?????????????
#define QR_MARGIN	4


/////////////////////////////////////////////////////////////////////////////
typedef struct tagRS_BLOCKINFO
{
	int ncRSBlock;		// ???????
	int ncAllCodeWord;	// ????????????
	int ncDataCodeWord;	// ??????????(??????? - ?????????)

} RS_BLOCKINFO, *LPRS_BLOCKINFO;


/////////////////////////////////////////////////////////////////////////////
// QR????????(??)????

typedef struct tagQR_VERSIONINFO
{
	int nVersionNo;	   // ?????(??)??(1?40)
	int ncAllCodeWord; // ????????

	// ????????????(0 = L, 1 = M, 2 = Q, 3 = H) 
	int ncDataCodeWord[4];	// ??????????(???????? - ?????????)

	int ncAlignPoint;	// ?????????????
	int nAlignPoint[6];	// ??????????????

	RS_BLOCKINFO RS_BlockInfo1[4]; // ????????(1)
	RS_BLOCKINFO RS_BlockInfo2[4]; // ????????(2)

} QR_VERSIONINFO, *LPQR_VERSIONINFO;


/////////////////////////////////////////////////////////////////////////////
// CQR_Encode ???

	int m_nLevel;		// ???????
	int m_nVersion;		// ?????(??)
	//BOOL m_bAutoExtent;	// ?????(??)?????????
	int m_nMaskingNo;	// ???????????

	int m_nSymbleSize;
	unsigned char m_byModuleData[MAX_MODULESIZE][MAX_MODULESIZE]; // [x][y]
	// bit5:????????????????????
	// bit4:????????????
	// bit1:????????
	// bit0:??????????????
	// 20h??????????????????11h????????????????BOOL???


	int m_ncDataCodeWordBit; // ?????????????
	unsigned char m_byDataCodeWord[MAX_DATACODEWORD]; // ?????????????

	int m_ncDataBlock;
	unsigned char m_byBlockMode[MAX_DATACODEWORD];
	int m_nBlockLength[MAX_DATACODEWORD];

	int m_ncAllCodeWord; // ????????(????????????)
	unsigned char m_byAllCodeWord[MAX_ALLCODEWORD]; // ????????????
	unsigned char m_byRSWork[MAX_CODEBLOCK]; // ?????????????

// ?????????????????

	int EncodeData(int nLevel, int nVersion, unsigned char bAutoExtent, int nMaskingNo, unsigned char* lpsSource, int ncSource);


	int GetEncodeVersion(int nVersion, unsigned char* lpsSource, int ncLength);
	int EncodeSourceData(unsigned char* lpsSource, int ncLength, int nVerGroup);

	int GetBitLength(unsigned char nMode, int ncData, int nVerGroup);

	int SetBitStream(int nIndex, unsigned short wData, int ncData);

	int IsNumeralData(unsigned char c);
	int IsAlphabetData(unsigned char c);
	int IsKanjiData(unsigned char c1, unsigned char c2);

	unsigned char AlphabetToBinaly(unsigned char c);
	unsigned short KanjiToBinaly(unsigned short wc);

	void GetRSCodeWord(unsigned char* lpbyRSWork, int ncDataCodeWord, int ncRSCodeWord);

// ????????????????

	void FormatModule(void);

	void SetFunctionModule(void);
	void SetFinderPattern(int x, int y);
	void SetAlignmentPattern(int x, int y);
	void SetVersionPattern(void);
	void SetCodeWordPattern(void);
	void SetMaskingPattern(int nPatternNo);
	void SetFormatInfoPattern(int nPatternNo);
	int CountPenalty(void);


/////////////////////////////////////////////////////////////////////////////

#endif 
